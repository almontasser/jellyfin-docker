name: Build Jellyfin Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      jellyfin_version:
        description: 'Jellyfin version tag'
        required: false
        default: 'main'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/jellyfin

jobs:
  build-jellyfin:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install GitPython
    
    - name: Update submodules to target version
      run: |
        if [ "${{ github.event.inputs.jellyfin_version }}" != "" ]; then
          ./checkout.py ${{ github.event.inputs.jellyfin_version }}
        else
          ./checkout.py master
        fi
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: jellyfin-web/package-lock.json
    
    - name: Build Jellyfin Server from source
      run: |
        # Set architecture variables
        DOTNET_ARCH=${{ matrix.arch == 'amd64' && 'x64' || 'arm64' }}
        
        # Set version using the same logic as jellyfin build system
        if [ "${{ github.event.inputs.jellyfin_version }}" = "" ] || [ "${{ github.event.inputs.jellyfin_version }}" = "master" ]; then
          JELLYFIN_VERSION=$(date +%Y%m%d%H)
        else
          JELLYFIN_VERSION="${{ github.event.inputs.jellyfin_version }}"
          # Remove 'v' prefix if present (same as build.py does)
          JELLYFIN_VERSION=${JELLYFIN_VERSION#v}
        fi
        
        echo "Using JELLYFIN_VERSION: $JELLYFIN_VERSION"
        
        # Create artifacts directory
        mkdir -p artifacts/server artifacts/web
        
        # Build Jellyfin Server
        cd jellyfin-server
        dotnet publish Jellyfin.Server \
          --configuration Release \
          --self-contained \
          --runtime linux-$DOTNET_ARCH \
          --output ../artifacts/server \
          -p:DebugType=none \
          -p:UseAppHost=true \
          -p:PublishSingleFile=false \
          -p:PublishReadyToRun=false
    
    - name: Build Jellyfin Web from source
      run: |
        # Build Jellyfin Web
        cd jellyfin-web
        npm ci --no-audit
        npm run build:production
        
        # Copy built web files to artifacts
        cp -r dist/* ../artifacts/web/
    
    - name: Verify built artifacts
      run: |
        # Verify that artifacts were built successfully
        echo "Checking server artifacts..."
        ls -la artifacts/server/
        test -f artifacts/server/jellyfin || (echo "ERROR: jellyfin binary not found" && exit 1)
        
        echo "Checking web artifacts..."
        ls -la artifacts/web/
        test -f artifacts/web/index.html || (echo "ERROR: web index.html not found" && exit 1)

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.arch }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.arch }}
        build-args: |
          TARGETARCH=${{ matrix.arch }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  create-manifest:
    needs: build-jellyfin
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create and push multi-arch manifest
      run: |
        # Create manifest for latest tag
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Create manifest for commit-specific tag
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}